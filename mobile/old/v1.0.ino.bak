#include <ArduinoBLE.h>
#include <Adafruit_NeoPixel.h>

/*  Helpers */
#define DEBUG 1
#define log(X)       \
  if (DEBUG)         \
  {                  \
    Serial.print(X); \
  }
#define logln(X)       \
  if (DEBUG)           \
  {                    \
    Serial.println(X); \
  }

void init_logger()
{
  if (DEBUG)
  {
    Serial.begin(9600);
    while (!Serial)
      ;
  }
}

/*                      LED Setup                          */
#define LED_PIN 6      // LED Input PIN
#define OBJECTS 7      // Number of objects
#define LEDS_PER_OBJ 3 // LEDs per object

Adafruit_NeoPixel strip(
    OBJECTS *LEDS_PER_OBJ, // Number of LEDs
    LED_PIN,
    NEO_GRB + NEO_KHZ800 // 800KHz GRB Bitstream
);

// sets the color of a mobile object
void setColor(uint16_t obj, uint32_t color)
{
  int first = obj * LEDS_PER_OBJ;
  for (int i = first; i < first + LEDS_PER_OBJ; i++)
  {
    strip.setPixelColor(i, color);
  }
  strip.show(); // update strip
}

/*                   Bluetooth Setup    */

#define BLE_SERVICE_ID "19B10000-E8F2-537E-4F6C-D104768A1214"
BLEService mobile(BLE_SERVICE_ID);                     // service for controlling the mobile
BLEUnsignedIntCharacteristic remote("0001", BLEWrite); // characteristic for changing object colors
BLECharacteristic colors(                              // characteristic providing access to all object colors
    "0002",
    BLERead | BLENotify | BLEIndicate,
    sizeof(uint32_t) * OBJECTS,
    true);

// handles color change commands sent by another BLE device
void handleRemoteCommand()
{
  uint16_t obj = (remote.value() >> 24) % OBJECTS;
  uint32_t color = remote.value();

  log("[OBJ #");
  log(obj);
  log("]: rgb(");
  log((color >> 16) & 0xFF);
  log(", ");
  log((color >> 8) & 0xFF);
  log(", ");
  log(color & 0xFF);
  logln(")");

  setColor(obj, color);
  updateObjectColors();
}

// updates the object colors for connected BLE devices
void updateObjectColors()
{
  uint32_t obj_colors[OBJECTS] = {};
  for (int i = 0; i < OBJECTS; i++)
  {
    obj_colors[i] = strip.getPixelColor(i * LEDS_PER_OBJ);
  }
  colors.writeValue((byte *)obj_colors, sizeof(uint32_t) * OBJECTS);
}

// Arduino default, executed once on startup
void setup()
{
  init_logger();
  logln("setup()");
  // LED init
  strip.begin();            // initializes LEDs
  strip.show();             // turn LEDs off
  strip.setBrightness(255); // set maximum brightness

  setup_ble();

  logln("setup successful");
}

void setup_ble()
{
  // BLE init
  if (!BLE.begin()) // start BLE
    logln("Failed to start BLE.");

  // set human readable device name
  BLE.setDeviceName("Mobile");
  BLE.setLocalName("Mobile");

  BLE.setAdvertisedServiceUuid(MOBILE_SERVICE);
  BLE.setAdvertisedService(mobile); // set service to advertise
  mobile.addCharacteristic(remote); // add remote control characteristic
  mobile.addCharacteristic(colors); // add color change notifications
  BLE.addService(mobile);           // make characteristics available

  updateObjectColors(); // init initial colors
  BLE.advertise();      // start advertising
}

// Arduino default, executed repeatedly after setup()
void loop()
{
  // listen for BLE connections
  BLEDevice central = BLE.central();

  if (central)
  {
    logln("Connected to central: " + central.address());

    // handle remote commands until disconnected
    while (central.connected())
    {
      if (remote.written())
        handleRemoteCommand();
    }

    logln("Disconnected from central: " + central.address());
  }
}